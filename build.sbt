// DO NOT EDIT THIS FILE
// IT IS AUTOGENERATED BY `sbtgen.sc` SCRIPT
// ALL CHANGES WILL BE LOST




enablePlugins(SbtgenVerificationPlugin)

libraryDependencies += "io.7mind.izumi.sbt" %% "sbtgen" % "0.0.104"

lazy val `util` = project.in(file("module/util"))
  .settings(
    libraryDependencies ++= Seq(
      "com.whisk" %% "util-zio-app" % V.whiskSbtPlugin,
      "com.whisk" %% "util-zio-config" % V.whiskSbtPlugin
    )
  )
  .settings(
    crossScalaVersions := Seq(
      "2.13.15"
    ),
    scalaVersion := crossScalaVersions.value.head,
    organization := "me.fidonode",
    Compile / unmanagedSourceDirectories += baseDirectory.value / ".jvm/src/main/scala" ,
    Compile / unmanagedSourceDirectories ++= (scalaBinaryVersion.value :: CrossVersion.partialVersion(scalaVersion.value).toList.map(_._1))
      .map(v => baseDirectory.value / s".jvm/src/main/scala-$v").distinct,
    Compile / unmanagedResourceDirectories += baseDirectory.value / ".jvm/src/main/resources" ,
    Test / unmanagedSourceDirectories += baseDirectory.value / ".jvm/src/test/scala" ,
    Test / unmanagedSourceDirectories ++= (scalaBinaryVersion.value :: CrossVersion.partialVersion(scalaVersion.value).toList.map(_._1))
      .map(v => baseDirectory.value / s".jvm/src/test/scala-$v").distinct,
    Test / unmanagedResourceDirectories += baseDirectory.value / ".jvm/src/test/resources" ,
    libraryDependencySchemes ++= 
    Seq(
            "io.circe" %% "circe-core" % VersionScheme.Always,
            "io.circe" %% "circe-parser" % VersionScheme.Always
          )
    
  )

lazy val `fridge` = project.in(file("module/fridge"))
  .dependsOn(
    `util` % "test->compile;compile->compile"
  )
  .settings(
    crossScalaVersions := Seq(
      "2.13.15"
    ),
    scalaVersion := crossScalaVersions.value.head,
    organization := "me.fidonode",
    Compile / unmanagedSourceDirectories += baseDirectory.value / ".jvm/src/main/scala" ,
    Compile / unmanagedSourceDirectories ++= (scalaBinaryVersion.value :: CrossVersion.partialVersion(scalaVersion.value).toList.map(_._1))
      .map(v => baseDirectory.value / s".jvm/src/main/scala-$v").distinct,
    Compile / unmanagedResourceDirectories += baseDirectory.value / ".jvm/src/main/resources" ,
    Test / unmanagedSourceDirectories += baseDirectory.value / ".jvm/src/test/scala" ,
    Test / unmanagedSourceDirectories ++= (scalaBinaryVersion.value :: CrossVersion.partialVersion(scalaVersion.value).toList.map(_._1))
      .map(v => baseDirectory.value / s".jvm/src/test/scala-$v").distinct,
    Test / unmanagedResourceDirectories += baseDirectory.value / ".jvm/src/test/resources" ,
    libraryDependencySchemes ++= 
    Seq(
            "io.circe" %% "circe-core" % VersionScheme.Always,
            "io.circe" %% "circe-parser" % VersionScheme.Always
          )
    
  )

lazy val `cooktop` = project.in(file("module/cooktop"))
  .dependsOn(
    `util` % "test->compile;compile->compile"
  )
  .settings(
    libraryDependencies ++= Seq(
      "com.whisk" %% "util-locale" % V.whiskSbtPlugin
    )
  )
  .settings(
    crossScalaVersions := Seq(
      "2.13.15"
    ),
    scalaVersion := crossScalaVersions.value.head,
    organization := "me.fidonode",
    Compile / unmanagedSourceDirectories += baseDirectory.value / ".jvm/src/main/scala" ,
    Compile / unmanagedSourceDirectories ++= (scalaBinaryVersion.value :: CrossVersion.partialVersion(scalaVersion.value).toList.map(_._1))
      .map(v => baseDirectory.value / s".jvm/src/main/scala-$v").distinct,
    Compile / unmanagedResourceDirectories += baseDirectory.value / ".jvm/src/main/resources" ,
    Test / unmanagedSourceDirectories += baseDirectory.value / ".jvm/src/test/scala" ,
    Test / unmanagedSourceDirectories ++= (scalaBinaryVersion.value :: CrossVersion.partialVersion(scalaVersion.value).toList.map(_._1))
      .map(v => baseDirectory.value / s".jvm/src/test/scala-$v").distinct,
    Test / unmanagedResourceDirectories += baseDirectory.value / ".jvm/src/test/resources" ,
    libraryDependencySchemes ++= 
    Seq(
            "io.circe" %% "circe-core" % VersionScheme.Always,
            "io.circe" %% "circe-parser" % VersionScheme.Always
          )
    
  )

lazy val `modules` = (project in file(".agg/module-modules"))
  .settings(
    publish / skip := true
  )
  .aggregate(
    `util`,
    `fridge`,
    `cooktop`
  )

lazy val `modules-jvm` = (project in file(".agg/module-modules-jvm"))
  .settings(
    publish / skip := true
  )
  .aggregate(
    `util`,
    `fridge`,
    `cooktop`
  )

lazy val `sbtgen-poc-jvm` = (project in file(".agg/.agg-jvm"))
  .settings(
    publish / skip := true
  )
  .aggregate(
    `modules-jvm`
  )

lazy val `sbtgen-poc` = (project in file("."))
  .settings(
    publish / skip := true
  )
  .aggregate(
    `modules`
  )
